use crate::ast::{CompUnit, SysYType, Block, BlockItem, Expr, OpCode, Symbol, SymbolValue, FuncParam, CompUnitDecl, LVal, InitListElem};

grammar;

match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^*]|\*+[^*/])*\*+/" => {},
  _
}

List<T, S>: Vec<T> = {
    <mut v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub CompUnit: CompUnit = <defs:(<CompUnitDecl>)*> => CompUnit {<>};

pub CompUnitDecl: CompUnitDecl = {
  <type_:SysYType> <ident:Ident> "(" <params:List<FuncParam, ",">> ")" <block:Block> => CompUnitDecl::FuncDef{<>},
  VarDecl => CompUnitDecl::VarDecl(<>),
};

pub SysYType: SysYType = {
    "int" => SysYType::Int,
    "void" => SysYType::Void,
}

pub FuncParam: FuncParam = {
  <type_:SysYType> <ident:Ident> => FuncParam::Var(<>),
  <type_:SysYType> <ident:Ident> "[" "]" <lens:(<ArrayDim>)*> => FuncParam::Arr(<>),
}

pub Block: Block = "{" <items:(<BlockItem>)*> "}" => Block {<>};

BlockItem: BlockItem = {OpenBlockItem, CloseBlockItem};

OpenBlockItem: BlockItem = {
  "if" "(" <cond:Expr> ")" <then_block:BlockItem> => BlockItem::If{cond: cond, then_block: Box::new(then_block), else_block: None},
  "if" "(" <cond:Expr> ")" <then_block:CloseBlockItem> "else" <else_block:OpenBlockItem> =>  BlockItem::If{cond: cond, then_block: Box::new(then_block), else_block: Some(Box::new(else_block))},
  "while" "(" <cond:Expr> ")" <while_block:OpenBlockItem> => BlockItem::While{cond: cond, while_block: Box::new(while_block)},
}

CloseBlockItem: BlockItem = {
  NonIfBlockItem,
  "if" "(" <cond:Expr> ")" <then_block:CloseBlockItem> "else" <else_block:CloseBlockItem> =>  BlockItem::If{cond: cond, then_block: Box::new(then_block), else_block: Some(Box::new(else_block))},
  "while" "(" <cond:Expr> ")" <while_block:CloseBlockItem> => BlockItem::While{cond: cond, while_block: Box::new(while_block)},
}

VarDecl: Vec<Symbol> = {
  "const" <type_:SysYType> <v:List<ConstVarDef, ",">> ";" => v,
  <type_:SysYType> <v:List<VariableDef, ",">> ";" => v,
}

NonIfBlockItem: BlockItem = {
  "return" <e:Expr?> ";" => BlockItem::Ret(e),
  VarDecl => BlockItem::Decl(<>),
  <v:LVal> "=" <e:Expr> ";" => BlockItem::Assign(v, e),
  Block => BlockItem::Block(<>),
  <e:Expr?> ";" => BlockItem::Expr(e),
  "break" ";" => BlockItem::Break,
  "continue" ";" => BlockItem::Continue,
};

ConstVarDef: Symbol = {
  <k:Ident> "=" <e:Expr> => Symbol {name: k, value: SymbolValue::Const(e)},
  <k:Ident> <lens:(<ArrayDim>)+> "=" "{" <init:List<InitListElem, ",">> "}" => Symbol {name: k, value: SymbolValue::ConstArr {lens: lens, init: InitListElem::List(init)}},
}

ArrayDim: Box<Expr> = "[" <e:Expr> "]" => e;
InitListElem: InitListElem = {
  "{" <x:List<InitListElem, ",">> "}" => InitListElem::List(x),
  <e:Expr> => InitListElem::Item(e),
}

VariableDef: Symbol = {
  <k:Ident> "=" <e:Expr> => Symbol {
    name: k,
    value: SymbolValue::Var(Some(e)),
  },
  <k:Ident> => Symbol {name: k, value: SymbolValue::Var(None)},
  <k:Ident> <lens:(<ArrayDim>)+> => Symbol {name: k, value: SymbolValue::Arr {lens: lens, init: None}},
  <k:Ident> <lens:(<ArrayDim>)+> "=" "{" <init:List<InitListElem, ",">> "}" => Symbol {name: k, value: SymbolValue::Arr {lens: lens, init: Some(InitListElem::List(init))}},
};

// Expression
BinaryTier<Op, NextTier>: Box<Expr> = {
    BinaryTier<Op, NextTier> Op NextTier => Box::new(Expr::Binary(<>)),
    NextTier
};

Expr = BinaryTier<LogicOr, AndExpr>;
AndExpr = BinaryTier<LogicAnd, EqExpr>;
EqExpr = BinaryTier<EqNeOp, RelExpr>;
RelExpr = BinaryTier<RelOp, AddExpr>;
AddExpr = BinaryTier<AddSubOp, MulExpr>;
MulExpr = BinaryTier<MulDivOpCode, UnaryExpr>;

UnaryExpr: Box<Expr> = {
  UnaryOpCode UnaryExpr => Box::new(Expr::Unary(<>)),
  Term,
}

Term: Box<Expr> = {
  Number => Box::new(Expr::Number(<>)),
  LVal => Box::new(Expr::Symbol(<>)),
  <funcname:Ident> "(" <args:List<Expr, ",">> ")" => Box::new(Expr::FuncCall{<>}),
  "(" <Expr> ")",
}

// OPs, numbers, and symbols
LogicOr: OpCode = {
  "||" => OpCode::LogicOr,
}

LogicAnd: OpCode = {
  "&&" => OpCode::LogicAnd,
}

EqNeOp: OpCode = {
  "==" => OpCode::Eq,
  "!=" => OpCode::Ne,
}

RelOp: OpCode = {
  "<=" => OpCode::Le,
  ">=" => OpCode::Ge,
  "<" => OpCode::Lt,
  ">" => OpCode::Gt,
}

AddSubOp: OpCode = {
  "+" => OpCode::Add,
  "-" => OpCode::Sub,
}

MulDivOpCode: OpCode = {
  "*" => OpCode::Mul,
  "/" => OpCode::Div,
  "%" => OpCode::Mod,
}

UnaryOpCode: OpCode = {
  "+" => OpCode::Add,
  "-" => OpCode::Sub,
  "!" => OpCode::Not,
}

LVal: LVal = {
  Ident => LVal::Ident(<>),
  <k:Ident> <lens:(<ArrayDim>)+> => LVal::ArrayElem(k, lens),
}

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

Number: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}