use crate::ast::{CompUnit, FuncDef, FuncType, Block, Ret, Expr, OpCode};

grammar;

match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^*]|\*+[^*/])*\*+/" => {},
  _
}

pub CompUnit: CompUnit = <func_def:FuncDef> => CompUnit {<>};

pub FuncDef: FuncDef = <type_:FuncType> <ident:Ident> "(" ")" <block:Block> => FuncDef{<>};

pub FuncType: FuncType = {
    "int" => FuncType::Int,
}

pub Block: Block = "{" <ret: Ret> "}" => Block {<>};

Ret: Ret = "return" <retv:OrExpr> ";" => Ret {<>};

OrExpr: Box<Expr> = {
  OrExpr LogicOr AndExpr => Box::new(Expr::Binary(<>)),
  AndExpr,
}

LogicOr: OpCode = {
  "||" => OpCode::LogicOr,
}

AndExpr: Box<Expr> = {
  AndExpr LogicAnd EqExpr => Box::new(Expr::Binary(<>)),
  EqExpr,
}

LogicAnd: OpCode = {
  "&&" => OpCode::LogicAnd,
}

EqExpr: Box<Expr> = {
  EqExpr EqNeOp RelExpr => Box::new(Expr::Binary(<>)),
  RelExpr,
}

EqNeOp: OpCode = {
  "==" => OpCode::Eq,
  "!=" => OpCode::Ne,
}

RelExpr: Box<Expr> = {
  RelExpr RelOp AddExpr => Box::new(Expr::Binary(<>)),
  AddExpr,
}

RelOp: OpCode = {
  "<=" => OpCode::Le,
  ">=" => OpCode::Ge,
  "<" => OpCode::Lt,
  ">" => OpCode::Gt,
}

AddExpr: Box<Expr> = {
  AddExpr AddSubOp MulExpr => Box::new(Expr::Binary(<>)),
  MulExpr,
}

AddSubOp: OpCode = {
  "+" => OpCode::Add,
  "-" => OpCode::Sub,
}

MulExpr: Box<Expr> = {
  MulExpr MulDivOpCode UnaryExpr => Box::new(Expr::Binary(<>)),
  UnaryExpr,
}

MulDivOpCode: OpCode = {
  "*" => OpCode::Mul,
  "/" => OpCode::Div,
  "%" => OpCode::Mod,
}

UnaryExpr: Box<Expr> = {
  UnaryOpCode UnaryExpr => Box::new(Expr::Unary(<>)),
  Term,
}

UnaryOpCode: OpCode = {
  "+" => OpCode::Add,
  "-" => OpCode::Sub,
  "!" => OpCode::Not,
}

Term: Box<Expr> = {
  Number => Box::new(Expr::Number(<>)),
  "(" <OrExpr> ")",
}

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

Number: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}