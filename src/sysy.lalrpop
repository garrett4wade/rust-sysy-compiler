use crate::ast::{CompUnit, FuncDef, FuncType, Block, BlockItem, Expr, OpCode, BType, Symbol, SymbolValue};
use std::collections::HashMap;

grammar;

match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^*]|\*+[^*/])*\*+/" => {},
  _
}

List<T, S>: Vec<T> = {
    <mut v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub CompUnit: CompUnit = <func_def:FuncDef> => CompUnit {<>};

pub FuncDef: FuncDef = <type_:FuncType> <ident:Ident> "(" ")" <block:Block> => FuncDef{<>};

pub FuncType: FuncType = {
    "int" => FuncType::Int,
}

pub Block: Block = "{" <items:(<BlockItem> ";")*> "}" => Block {<>};

BlockItem: BlockItem = {
  "return" <e:Expr> => BlockItem::Ret(e),
  "const" <type_:BType> <v:List<ConstVarDef, ",">> => BlockItem::Decl(v),
};

ConstVarDef: Symbol = <k:Ident> "=" <e:Expr> => {
  Symbol {
    name: k,
    value: SymbolValue::Const(e),
  }
};

BType: BType = {
  "int" => BType::Int,
};

// Expression
BinaryTier<Op, NextTier>: Box<Expr> = {
    BinaryTier<Op, NextTier> Op NextTier => Box::new(Expr::Binary(<>)),
    NextTier
};

Expr = BinaryTier<LogicOr, AndExpr>;
AndExpr = BinaryTier<LogicAnd, EqExpr>;
EqExpr = BinaryTier<EqNeOp, RelExpr>;
RelExpr = BinaryTier<RelOp, AddExpr>;
AddExpr = BinaryTier<AddSubOp, MulExpr>;
MulExpr = BinaryTier<MulDivOpCode, UnaryExpr>;

UnaryExpr: Box<Expr> = {
  UnaryOpCode UnaryExpr => Box::new(Expr::Unary(<>)),
  Term,
}

Term: Box<Expr> = {
  Number => Box::new(Expr::Number(<>)),
  "(" <Expr> ")",
}

// OPs, numbers, and symbols
LogicOr: OpCode = {
  "||" => OpCode::LogicOr,
}

LogicAnd: OpCode = {
  "&&" => OpCode::LogicAnd,
}

EqNeOp: OpCode = {
  "==" => OpCode::Eq,
  "!=" => OpCode::Ne,
}

RelOp: OpCode = {
  "<=" => OpCode::Le,
  ">=" => OpCode::Ge,
  "<" => OpCode::Lt,
  ">" => OpCode::Gt,
}

AddSubOp: OpCode = {
  "+" => OpCode::Add,
  "-" => OpCode::Sub,
}

MulDivOpCode: OpCode = {
  "*" => OpCode::Mul,
  "/" => OpCode::Div,
  "%" => OpCode::Mod,
}

UnaryOpCode: OpCode = {
  "+" => OpCode::Add,
  "-" => OpCode::Sub,
  "!" => OpCode::Not,
}

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

Number: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}